services:
  caddy:
    image: caddy:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
    networks:
      - gwon_network






  backend:
    restart: unless-stopped
    build: ./backend
    depends_on:
      db:
        condition: service_healthy
      mosquitto:
        condition: service_started
    environment:
      - DB_HOST=db
      - MQTT_BROKER=tcp://mosquitto:1883
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - gwon_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  frontend:
    restart: unless-stopped
    build: ./frontend
    ports:
      - "3000:3000"
    networks:
      - gwon_network

  mosquitto:
    image: eclipse-mosquitto:2
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"   # (옵션, WebSocket)
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log



  db:
    image: mysql:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: gwondb
      MYSQL_USER: gwon
      MYSQL_DATABASE: gwondb
      MYSQL_PASSWORD: gwondb
      TZ: Asia/Seoul
    command: 
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max_allowed_packet=128M
      - --innodb_buffer_pool_size=1G
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - gwon_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "gwon", "-pgwondb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  caddy_data:
  caddy_config:

  db_data:


